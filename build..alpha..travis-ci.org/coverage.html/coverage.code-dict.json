{"/home/travis/build/npmtest/node-npmtest-jsx-chai/test.js":"/* istanbul instrument in package npmtest_jsx_chai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/lib.npmtest_jsx_chai.js":"/* istanbul instrument in package npmtest_jsx_chai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsx_chai = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsx_chai = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsx-chai && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsx_chai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsx_chai\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsx_chai.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsx_chai.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsx_chai.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsx_chai.__dirname + '/lib.npmtest_jsx_chai.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/node_modules/jsx-chai/lib/jsx-chai.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = jsxChai;\n\nvar _reactAddonsTestUtils = require('react-addons-test-utils');\n\nvar _collapseWhiteSpace = require('collapse-white-space');\n\nvar _collapseWhiteSpace2 = _interopRequireDefault(_collapseWhiteSpace);\n\nvar _reactElementToJsxString = require('react-element-to-jsx-string');\n\nvar _reactElementToJsxString2 = _interopRequireDefault(_reactElementToJsxString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction jsxChai(_ref, _ref2) {\n  var Assertion = _ref.Assertion;\n  var inspect = _ref2.inspect;\n\n\n  Assertion.addProperty('jsx', function addJsx() {\n    this.assert((0, _reactAddonsTestUtils.isElement)(this._obj), 'expected #{this} to be a JSX element', 'expected #{this} not to be a JSX element');\n  });\n\n  function jsxMethod(func) {\n    return function jsxMethodWrapper(_super) {\n      return function jsxMethodInner(jsx) {\n        if (!(0, _reactAddonsTestUtils.isElement)(this._obj)) {\n          return _super.apply(this, arguments);\n        }\n\n        var expected = (0, _reactElementToJsxString2.default)(jsx);\n        var actual = (0, _reactElementToJsxString2.default)(this._obj);\n\n        return func.call(this, { jsx: jsx, expected: expected, actual: actual });\n      };\n    };\n  }\n\n  function jsxEql(_ref3) {\n    var expected = _ref3.expected;\n    var actual = _ref3.actual;\n\n    this.assert((0, _collapseWhiteSpace2.default)(actual) === (0, _collapseWhiteSpace2.default)(expected), 'expected #{act} to equal #{exp}', 'expected #{act} to not equal #{exp}', expected, actual, true);\n  }\n\n  function jsxInclude(_ref4) {\n    var expected = _ref4.expected;\n    var actual = _ref4.actual;\n\n    this.assert(~(0, _collapseWhiteSpace2.default)(actual).indexOf((0, _collapseWhiteSpace2.default)(expected)), 'expected #{act} to contain ' + inspect(expected), 'expected #{act} to not contain ' + inspect(expected), expected, actual);\n  }\n\n  function overwriteInclude(name) {\n    Assertion.overwriteChainableMethod(name, jsxMethod(jsxInclude), function includeWrapper(_super) {\n      return function includeInner() {\n        return _super.apply(this, arguments);\n      };\n    });\n  }\n\n  Assertion.overwriteMethod('eql', jsxMethod(jsxEql));\n  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql));\n\n  overwriteInclude('include');\n  overwriteInclude('contain');\n  overwriteInclude('includes');\n  overwriteInclude('contains');\n}\n//# sourceMappingURL=jsx-chai.js.map\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/node_modules/jsx-chai/gulpfile.js":"import babel from 'gulp-babel'\nimport chalk from 'chalk'\nimport gulp from 'gulp'\nimport gutil from 'gulp-util'\nimport sourcemaps from 'gulp-sourcemaps'\nimport webpack from 'webpack'\nimport webpackConfig from './webpack.config'\n\ngulp.task('build', ['build:transpile', 'build:bundle'])\n\ngulp.task('build:transpile', () => {\n  return gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('lib'))\n})\n\ngulp.task('build:bundle', done => {\n  webpack(webpackConfig, (err, stats) => {\n    if (err) throw new gutil.PluginError('webpack', err)\n\n    const statString = stats.toString({colors: true})\n\n    gutil.log(`[build:bundle] ${chalk.cyan('Bundling complete!')} \\n${statString}\\n`)\n\n    done()\n  })\n})\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/node_modules/jsx-chai/webpack.config.js":"import webpack from 'webpack'\n\nexport default {\n  devtool: 'source-map',\n  entry: './src/jsx-chai',\n  externals: {\n    'react': {\n      root: 'React',\n      commonjs: 'react',\n      commonjs2: 'react',\n      amd: 'react',\n    },\n    'react-addons-test-utils': {\n      root: 'React.addons.TestUtils',\n      commonjs: 'react-addons-test-utils',\n      commonjs2: 'react-addons-test-utils',\n      amd: 'react-addons-test-utils',\n    },\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loaders: ['babel'],\n    }],\n  },\n  output: {\n    path: 'dist',\n    filename: 'jsx-chai.min.js',\n    library: 'jsxChai',\n    libraryTarget: 'umd',\n  },\n  plugins: [\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n  ],\n}\n","/home/travis/build/npmtest/node-npmtest-jsx-chai/node_modules/jsx-chai/src/jsx-chai.js":"import {isElement} from 'react-addons-test-utils'\nimport collapse from 'collapse-white-space'\nimport reactElementToJSXString from 'react-element-to-jsx-string'\n\nexport default function jsxChai({Assertion}, {inspect}) {\n\n  Assertion.addProperty('jsx', function addJsx() {\n    this.assert(\n      isElement(this._obj),\n      'expected #{this} to be a JSX element',\n      'expected #{this} not to be a JSX element'\n    )\n  })\n\n  function jsxMethod(func) {\n    return function jsxMethodWrapper(_super) {\n      return function jsxMethodInner(jsx) {\n        if (!isElement(this._obj)) {\n          return _super.apply(this, arguments)\n        }\n\n        const expected = reactElementToJSXString(jsx)\n        const actual = reactElementToJSXString(this._obj)\n\n        return func.call(this, {jsx, expected, actual})\n      }\n    }\n  }\n\n  function jsxEql({expected, actual}) {\n    this.assert(\n      collapse(actual) === collapse(expected),\n      'expected #{act} to equal #{exp}',\n      'expected #{act} to not equal #{exp}',\n      expected,\n      actual,\n      true\n    )\n  }\n\n  function jsxInclude({expected, actual}) {\n    this.assert(\n      ~collapse(actual).indexOf(collapse(expected)),\n      `expected #{act} to contain ${inspect(expected)}`,\n      `expected #{act} to not contain ${inspect(expected)}`,\n      expected,\n      actual\n    )\n  }\n\n  function overwriteInclude(name) {\n    Assertion.overwriteChainableMethod(\n      name,\n      jsxMethod(jsxInclude),\n      function includeWrapper(_super) {\n        return function includeInner() {\n          return _super.apply(this, arguments)\n        }\n      }\n    )\n  }\n\n  Assertion.overwriteMethod('eql', jsxMethod(jsxEql))\n  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql))\n\n  overwriteInclude('include')\n  overwriteInclude('contain')\n  overwriteInclude('includes')\n  overwriteInclude('contains')\n\n}\n"}